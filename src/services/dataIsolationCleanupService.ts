import { supabase } from "@/integrations/supabase/client";

export interface IsolationDiagnostic {
  table_name: string;
  user_company_data_count: number;
  other_company_data_count: number;
  isolation_status: 'GOOD' | 'LEAK' | 'ERROR';
}

export interface CleanupResult {
  success: boolean;
  diagnostics: IsolationDiagnostic[];
  cleaned: boolean;
  message: string;
}

/**
 * Service pour diagnostiquer et nettoyer l'isolation des donn√©es
 */
export class DataIsolationCleanupService {
  
  /**
   * Diagnostiquer l'√©tat de l'isolation des donn√©es
   */
  static async diagnoseDataIsolation(): Promise<IsolationDiagnostic[]> {
    try {
      console.log("üîç DIAGNOSTIC - D√©but du diagnostic d'isolation des donn√©es");
      
      const { data, error } = await supabase.rpc('diagnose_data_isolation');
      
      if (error) {
        console.error("üîç DIAGNOSTIC - Erreur:", error);
        throw error;
      }
      
      console.log("üîç DIAGNOSTIC - R√©sultats:", data);
      return data || [];
    } catch (error) {
      console.error('Erreur lors du diagnostic d\'isolation:', error);
      return [];
    }
  }
  
  /**
   * Nettoyer les donn√©es d'isolation
   */
  static async cleanupDataIsolation(): Promise<boolean> {
    try {
      console.log("üßπ CLEANUP - D√©but du nettoyage des donn√©es");
      
      const { data, error } = await supabase.rpc('cleanup_company_data_isolation');
      
      if (error) {
        console.error("üßπ CLEANUP - Erreur:", error);
        throw error;
      }
      
      console.log("üßπ CLEANUP - R√©sultat:", data);
      return data === true;
    } catch (error) {
      console.error('Erreur lors du nettoyage d\'isolation:', error);
      return false;
    }
  }
  
  /**
   * Effectuer un diagnostic complet et nettoyer si n√©cessaire
   */
  static async performFullIsolationCheck(): Promise<CleanupResult> {
    try {
      console.log("üîß FULL CHECK - D√©but du contr√¥le complet d'isolation");
      
      // 1. Diagnostiquer d'abord
      const diagnostics = await this.diagnoseDataIsolation();
      
      // 2. V√©rifier s'il y a des fuites de donn√©es
      const hasLeaks = diagnostics.some(d => d.isolation_status === 'LEAK');
      
      if (!hasLeaks) {
        console.log("üîß FULL CHECK - Aucune fuite d√©tect√©e, isolation OK");
        return {
          success: true,
          diagnostics,
          cleaned: false,
          message: "L'isolation des donn√©es est correcte"
        };
      }
      
      console.log("üîß FULL CHECK - Fuites d√©tect√©es, nettoyage en cours...");
      
      // 3. Nettoyer les donn√©es
      const cleanupSuccess = await this.cleanupDataIsolation();
      
      if (!cleanupSuccess) {
        return {
          success: false,
          diagnostics,
          cleaned: false,
          message: "√âchec du nettoyage des donn√©es"
        };
      }
      
      // 4. Re-diagnostiquer apr√®s nettoyage
      const postCleanupDiagnostics = await this.diagnoseDataIsolation();
      
      console.log("üîß FULL CHECK - Nettoyage termin√©, nouvelle v√©rification:", postCleanupDiagnostics);
      
      return {
        success: true,
        diagnostics: postCleanupDiagnostics,
        cleaned: true,
        message: "Donn√©es nettoy√©es et isolation restaur√©e"
      };
      
    } catch (error) {
      console.error('Erreur lors du contr√¥le d\'isolation complet:', error);
      return {
        success: false,
        diagnostics: [],
        cleaned: false,
        message: `Erreur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
      };
    }
  }
  
  /**
   * V√©rifier et nettoyer automatiquement les donn√©es √† la connexion
   */
  static async autoCleanupOnLogin(): Promise<void> {
    try {
      console.log("üöÄ AUTO CLEANUP - Nettoyage automatique au login");
      
      // Attendre un peu pour que l'authentification soit compl√®te
      setTimeout(async () => {
        const result = await this.performFullIsolationCheck();
        
        if (result.cleaned) {
          console.log("üöÄ AUTO CLEANUP - Donn√©es nettoy√©es automatiquement");
        } else if (result.success) {
          console.log("üöÄ AUTO CLEANUP - Isolation OK, aucun nettoyage n√©cessaire");
        } else {
          console.warn("üöÄ AUTO CLEANUP - Probl√®me d√©tect√© mais non r√©solu:", result.message);
        }
      }, 2000);
      
    } catch (error) {
      console.error('Erreur lors du nettoyage automatique:', error);
    }
  }
}

export default DataIsolationCleanupService;