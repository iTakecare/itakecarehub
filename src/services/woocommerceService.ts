import { Product } from "@/types/catalog";

export const mapDbProductToProduct = (dbProduct: any): Product => {
  return {
    id: dbProduct.id,
    name: dbProduct.name,
    slug: dbProduct.slug || '',
    permalink: dbProduct.permalink || '',
    dateCreated: dbProduct.created_at || new Date().toISOString(),
    dateModified: dbProduct.updated_at || new Date().toISOString(),
    type: dbProduct.type || 'simple',
    status: dbProduct.status || 'publish',
    featured: dbProduct.featured || false,
    catalogVisibility: dbProduct.catalog_visibility || 'visible',
    description: dbProduct.description || '',
    shortDescription: dbProduct.short_description || '',
    sku: dbProduct.sku || '',
    price: dbProduct.price || '0',
    regularPrice: dbProduct.regular_price || '0',
    salePrice: dbProduct.sale_price || '',
    dateOnSaleFrom: null,
    dateOnSaleTo: null,
    priceHtml: dbProduct.price_html || '',
    onSale: dbProduct.on_sale || false,
    purchasable: dbProduct.purchasable || true,
    totalSales: dbProduct.total_sales || 0,
    virtual: dbProduct.virtual || false,
    downloadable: dbProduct.downloadable || false,
    downloads: [],
    downloadLimit: dbProduct.download_limit || -1,
    downloadExpiry: dbProduct.download_expiry || -1,
    externalUrl: dbProduct.external_url || '',
    buttonText: dbProduct.button_text || '',
    taxStatus: dbProduct.tax_status || 'taxable',
    taxClass: dbProduct.tax_class || '',
    manageStock: dbProduct.manage_stock || false,
    stockQuantity: dbProduct.stock_quantity || 0,
    inStock: dbProduct.in_stock || true,
    backorders: dbProduct.backorders || 'no',
    backordersAllowed: dbProduct.backorders_allowed || false,
    backordered: dbProduct.backordered || false,
    soldIndividually: dbProduct.sold_individually || false,
    weight: dbProduct.weight || '',
    dimensions: {
      length: dbProduct.length || '',
      width: dbProduct.width || '',
      height: dbProduct.height || ''
    },
    shippingRequired: dbProduct.shipping_required || true,
    shippingTaxable: dbProduct.shipping_taxable || true,
    shippingClass: dbProduct.shipping_class || '',
    shippingClassId: dbProduct.shipping_class_id || 0,
    reviewsAllowed: dbProduct.reviews_allowed || true,
    averageRating: dbProduct.average_rating || '0',
    ratingCount: dbProduct.rating_count || 0,
    relatedIds: dbProduct.related_ids || [],
    upsellIds: dbProduct.upsell_ids || [],
    crossSellIds: dbProduct.cross_sell_ids || [],
    parentId: dbProduct.parent_id || 0,
    purchaseNote: dbProduct.purchase_note || '',
    categories: dbProduct.categories || [],
    tags: dbProduct.tags || [],
    images: dbProduct.images || [],
    attributes: dbProduct.attributes || [],
    defaultAttributes: dbProduct.default_attributes || [],
    variations: dbProduct.variations || [],
    groupedProducts: dbProduct.grouped_products || [],
    menuOrder: dbProduct.menu_order || 0,
    metaData: dbProduct.meta_data || [],
    imageAlts: dbProduct.image_alts || [],
    // Add any custom fields needed
    price_number: parseFloat(dbProduct.price || '0'),
    category: dbProduct.category || '',
    brand: dbProduct.brand || '',
    model: dbProduct.model || '',
    stock: dbProduct.stock || 0,
    active: dbProduct.active || true,
    discount_per_quantity: dbProduct.discount_per_quantity || {},
    createdAt: dbProduct.created_at || new Date().toISOString(),
    updatedAt: dbProduct.updated_at || new Date().toISOString()
  };
};
